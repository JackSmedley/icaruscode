#include "services_common_icarus.fcl"
#include "detsimmodules_ICARUS.fcl"
##include "triggersim_icarus.fcl"
##include "opticaldetectorsim_icarus.fcl"
##include "time_memory_tracker_icarus.fcl"
##include "swtrigger_icarus.fcl"

process_name: Detsim

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "detsim_hist.root" }
  #TimeTracker:             @local::icarus_time_tracker
  #MemoryTracker:           @local::icarus_memory_tracker
  RandomNumberGenerator: {} #ART native random number generator
  #FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::icarus_common_services
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
  saveMemoryObjectThreshold: 0
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   daq:            @local::icarus_simwire
   rns:            { module_type: "RandomNumberSaver" }
 }
 
 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, daq ]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [ simulate ] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

# For SBN workshop revert to white noise in the simulation
physics.producers.daq.NoiseGenToolVec: [@local::WhiteNoiseTool, @local::WhiteNoiseTool, @local::WhiteNoiseTool]
physics.producers.daq.NoiseFactVec: [ [ 1.8, 1.8, 1.8, 1.8 ], [ 1.8, 1.8, 1.8, 1.8 ], [ 1.8, 1.8, 1.8, 1.8 ] ]

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_detsim.root"
   dataTier:    "detector-simulated"
   saveMemoryObjectThreshold: 0
   compressionLevel: 1
   fastCloning: false
 }
}

