###
## This fhicl file is used to run "stage0" processing specifically for the case where all
## TPC data is included in an artdaq data product from a single instance
##
#include "stage0_icarus_driver_common.fcl"

process_name: stage0

## Use the following to run the full defined stage0 set of modules
#physics.reco: [@sequence::icarus_stage0_single]

## Use the following to run only the decoding and noise filtering
## ==> Set as default for production processing for lifetime measurements - Jan, 2021
#physics.reco: [ daqTPC ]

# Custom list
physics.reco: [ daqTPC,
                daqPMT,
                decon1droi,
#                decon2droi,
                roifinder,
                gaushit
               ]


## boiler plate...
physics.trigger_paths: [ reco ]
outputs.out1.fileName: "%ifb_%tc-%p.root"
outputs.out1.dataTier: "reconstructed"

# Drop the artdaq format files on output
outputs.out1.outputCommands: ["keep *_*_*_*", "drop *_*_*_DAQ*", "drop *_decon1droi_*_*" ]

# Add a few temporary overrides that will either be dropped or made default in the future.
#physics.producers.daqTPC.DecoderTool.DiagnosticOutput:                       true               # This turns on lots of diagnostic messages... LOTS. S
#physics.producers.daqTPC.OutputRawWaveform:                                  true                # This will output uncorrected waveforms along with correctedd
#physics.producers.daqTPC.OutputCorrection:                                   true                # This outputs the coherent noise corrections
physics.producers.daqTPC.DecoderTool.UseFFTFilter:                           false               # If true will run high/low/window filters
physics.producers.daqTPC.DecoderTool.Threshold:                              [3.00, 3.00, 3.00]  # ROI thresholds for coherent noise subtraction "protection"
#physics.producers.daqTPC.DecoderTool.StructuringElement:                     16                 # Allows setting size of 1D structuring element

# This causes 1D deconvolution to output full waveforms
physics.producers.decon1droi.ROIFinderToolVec.ROIFinderToolPlane0:           @local::icarus_noproifinder_0
physics.producers.decon1droi.ROIFinderToolVec.ROIFinderToolPlane1:           @local::icarus_noproifinder_1
physics.producers.decon1droi.ROIFinderToolVec.ROIFinderToolPlane2:           @local::icarus_noproifinder_2

# This to study 2D ROI finding
#physics.producers.roifinder.WireModuleLabel:                                "decon2droi:gauss"
physics.producers.roifinder.OutputMorphed:                                   false

physics.producers.gaushit.CalDataModuleLabel:                                "roifinder" #decon2droi:gauss" #"roifinder"
physics.producers.gaushit.HitFinderToolVec.CandidateHitsPlane0:              @local::candhitfinder_standard      # Sets hit finding for plane 0
physics.producers.gaushit.HitFinderToolVec.CandidateHitsPlane0.Plane:        0
physics.producers.gaushit.HitFinderToolVec.CandidateHitsPlane0.RoiThreshold: 10.
physics.producers.gaushit.HitFinderToolVec.CandidateHitsPlane1:              @local::candhitfinder_standard      # Sets hit finding for plane 1
physics.producers.gaushit.HitFinderToolVec.CandidateHitsPlane1.Plane:        1
physics.producers.gaushit.HitFinderToolVec.CandidateHitsPlane1.RoiThreshold: 10.
physics.producers.gaushit.HitFinderToolVec.CandidateHitsPlane2:              @local::candhitfinder_standard      # Sets hit finding for plane 2
physics.producers.gaushit.HitFinderToolVec.CandidateHitsPlane2.Plane:        2
physics.producers.gaushit.HitFinderToolVec.CandidateHitsPlane2.RoiThreshold: 10.

