#include "services_common_icarus.fcl"
#include "channelmapping_icarus.fcl"
#include "recowire_icarus.fcl"
#include "hitfindermodules_icarus.fcl"
#include "icarus_ophitfinder.fcl"
#include "icarus_flashfinder.fcl"
#include "PhotonCalibrator.fcl"

process_name: opreco



services:
{
   TFileService:       @erase 
   IICARUSChannelMap:  @local::icarus_channelmappinggservice
}

#Turn clock services off
#services.DetectorClocksService.DefaultBeamTime: 0
#services.DetectorClocksService.DefaultTrigTime: 0

# Make sure to get rid of NuRandomSvc (not thread save)
services.NuRandomService: @erase

# turn off the sam metadata for testing
services.FileCatalogMetadata: {}

#Look at the input files
source:
{
  module_type: RootInput
  fileNames:  [ "data.root" ]
  maxEvents:   -1       # Number of events to create
}



physics:
{
    producers:
    {
        ophit:        @local::icarus_ophit
    }

   # analyzers: 
   # {
    #  pulseana:     @local::pmt_pulseana_icarus
  #    scintana:     @local::pmt_scintillation_icarus
   # }

    my_producer_modules: [ ophit ]
    #a: [ pulseana, rootout ]
    a: [ rootout ]
    #a: []
    end_paths: [a]
}




## DECODER ######################################################################################################################

physics.producers.ophit.InputModule: "opdaq"
physics.producers.ophit.InputLabels: []

## OPHIT ########################################################################################################################

physics.producers.ophit.reco_man:                         @local::standard_preco_manager
physics.producers.ophit.module_type:                      "OpHitFinder"
physics.producers.ophit.HitAlgoPset:                      @local::icarus_opreco_hit_slidingwindow
physics.producers.ophit.PedAlgoPset.Name:                 "RollingMean"
physics.producers.ophit.PedAlgoPset.PedRangeMax:          16000
physics.producers.ophit.PedAlgoPset.PedRangeMin:          13000
physics.producers.ophit.PedAlgoPset.MaxSigma:             4.0
physics.producers.ophit.OutputFile:                       "/icarus/app/users/mbabicz/my_ana/reco-test/mc/ophit_debug.root"
#physics.producers.ophit.UseCalibrator:                    false   #can't configure the appropriate service
#physics.producers.ophit.HitThreshold:                     0.2   
#physics.producers.ophit.AreaToPE:                         true  
#physics.producers.ophit.SPEArea:                          327.87 #= 1.6/(0.122*2.0*0.02) = q/(ADC2mV*sampling_time*1/50kOhm) 
physics.producers.ophit.reco_man:                         @local::standard_preco_manager
physics.producers.ophit.HitAlgoPset:                      @local::icarus_opreco_hit_slidingwindow
#physics.producers.ophit.HitAlgoPset.PositivePolarity:    true
physics.producers.ophit.HitAlgoPset.NumPreSample:         0
physics.producers.ophit.HitAlgoPset.NumPostSample:        0
physics.producers.ophit.HitAlgoPset.ADCThreshold:        100    
physics.producers.ophit.HitAlgoPset.NSigmaThreshold:     5     
physics.producers.ophit.HitAlgoPset.TailADCThreshold:    20    
physics.producers.ophit.HitAlgoPset.TailNSigmaThreshold: 3     
physics.producers.ophit.HitAlgoPset.EndADCThreshold:     5    
physics.producers.ophit.HitAlgoPset.EndNSigmaThreshold:  1     
physics.producers.ophit.HitAlgoPset.MinPulseWidth:       5     
physics.producers.ophit.HitAlgoPset.Verbosity:           false 
physics.producers.ophit.UseStartTime:                    true


## ANALYZERS ########################################################################################################################

#physics.analyzers.flashana.DecoderModulesList: ["opdaq"]
#physics.analyzers.flashana.OpHitModulesList:   ["ophit"]


#physics.analyzers.scintana.DecoderModulesList: ["opdaq"]
#physics.analyzers.scintana.OpHitModulesList:   ["ophit"]
#physics.analyzers.scintana.DumpWaveform: false

## OUTPUT ############################################################################################################################

outputs: {
  rootout: {
    module_type: "RootOutput"
    fileName: "%ifb_%tc-%p.root"
    dataTier: "cosmic-reco"
  }
}

# Drop the artdaq format files on output
#outputs.rootout.outputCommands: ["keep *_*_*_*", "drop *_*_*_DAQ*" ]
outputs.rootout.outputCommands: ["keep *_*_*_*"]

