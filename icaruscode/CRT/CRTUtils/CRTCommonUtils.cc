#ifndef IC_CRTCOMMONUTILS_CC
#define IC_CRTCOMMONUTILS_CC

#include "icaruscode/CRT/CRTUtils/CRTCommonUtils.h"

namespace icarus {
 namespace crt {

    //given an AuxDetGeo object, returns name of the CRT subsystem to which it belongs
    char CRTCommonUtils::GetAuxDetType(geo::AuxDetGeo const& adgeo) {
        std::string volName(adgeo.TotalVolume()->GetName());
        if (volName.find("MINOS") != std::string::npos) return 'm';
        if (volName.find("CERN")  != std::string::npos) return 'c';
        if (volName.find("DC")    != std::string::npos) return 'd';

        mf::LogError("CRT") << "AuxDetType not found!" << '\n';
        return 'e';

    }

    //------------------------------------------------------------------------------------
    //given an AuxDetGeo object, returns name of the CRT region to which it belongs
    std::string CRTCommonUtils::GetAuxDetRegion(geo::AuxDetGeo const& adgeo) {
        char type = CRTCommonUtils::GetAuxDetType(adgeo);
        std::string base = "volAuxDet_", region="";
        switch ( type ) {
          case 'c' : base+= "CERN"; break;
          case 'd' : base+= "DC"; break;
          case 'm' : base+= "MINOS"; break;
        }
        base+="_module_###_";
        std::string volName(adgeo.TotalVolume()->GetName());
      
        //module name has 2 possible formats
        //  volAuxDet_<subsystem>_module_###_<region>
        //  volAuxDet_<subsystem>_module_###_cut###_<region>
      
        region = volName.substr(base.length(),volName.length());
        if( region.find("_")==std::string::npos)
          return region;
      
        else
              return region.substr(region.find("_")+1,region.length());
      
    }

    //------------------------------------------------------------------------------
    int CRTCommonUtils::GetAuxDetRegionNum(std::string reg)
    {
        if(reg == "Top")        return 30;
        if(reg == "RimWest")    return 31;
        if(reg == "RimEast")    return 32;
        if(reg == "RimSouth")   return 33;
        if(reg == "RimNorth")   return 34;
        if(reg == "WestSouth")  return 40;
        if(reg == "WestCenter") return 41;
        if(reg == "WestNorth")  return 42;
        if(reg == "EastSouth")  return 43;
        if(reg == "EastCenter") return 44;
        if(reg == "EastNorth")  return 45;
        if(reg == "South")      return 46;
        if(reg == "North")      return 47;
        if(reg == "Bottom")     return 50;
        mf::LogError("CRT") << "region not found!" << '\n';
        return INT_MAX;
    }//GetAuxDetRegionNum()

    //---------------------------------------------------------------------------------
    std::string CRTCommonUtils::GetRegionNameFromNum(int num) {
        switch(num) {
            case 30 :
                return "Top";
            case 31 :
                return "RimWest";
            case 32 :
                return "RimEast";
            case 33 :
                return "RimSouth";
            case 34 :
                return "RimNorth";
            case 40 :
                return "WestSouth";
            case 41 :
                return "WestCenter";
            case 42 :
                return "WestNorth";
            case 43 :
                return "EastSouth";
            case 44 :
                return "EastCenter";
            case 45 :
                return "EastNorth";
            case 46 :
                return "South";
            case 47 :
                return "North";
            case 50 :
                return "Bottom";
        }
    
        return "Region not found!";
    }

    //--------------------------------------------------------------------------------------
    //reads a file generated by CRT geometry generation script and
    // returns a map modID->FEB(s), FEB channel subset(s). can be 2 if MINOS module (not cut)
    std::map<int,std::vector<std::pair<int,int>>> CRTCommonUtils::GetFebMap() {

	std::map<int,std::vector<std::pair<int,int>>> febMap;

        std::string fullFileName;
        cet::search_path searchPath("FW_SEARCH_PATH");
        searchPath.find_file("feb_map.txt",fullFileName);
        std::ifstream fin;
        fin.open(fullFileName,std::ios::in);

        if(fin.good()) 
            std::cout << "opened file 'feb_map.txt' for reading..." << std::endl;
        else
            throw cet::exception("CRTDetSim::FillFebMap") 
              << "Unable to find/open file 'feb_map.txt'" << std::endl;

        std::vector<std::string> row;
        std::string line, word;
        while(getline(fin,line)) {
            row.clear();
            std::stringstream s(line);
            int mod;
            while (std::getline(s, word, ',')) {
                row.push_back(word);
            }
            mod = std::stoi(row[0]);
            febMap[mod].push_back(std::make_pair(std::stoi(row[1]),std::stoi(row[2])));
            if(row.size()>3)
                febMap[mod].push_back(std::make_pair(std::stoi(row[3]),std::stoi(row[4])));
        }
        std::cout << "filled febMap with " << febMap.size() << " entries" << std::endl;
        fin.close();

	return febMap;

    }

 }//namespace crt
}//namespace icarus


#endif
