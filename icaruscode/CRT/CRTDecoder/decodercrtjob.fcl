#include "services_common_icarus.fcl"
#include "channelmapping_icarus.fcl"

process_name: crtdecoder

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "hist.root" }
  TimeTracker:  {}
  MemoryTracker:     { ignoreTotal: 1 } # default is one
#  RandomNumberGenerator: {} #ART native random number generator
  IICARUSChannelMap:        @local::icarus_channelmappinggservice	
                            @table::icarus_calibration_services
                            @table::icarus_wirecalibration_services

  #FileCatalogMetadata:  @local::art_file_catalog_mc
 #  @table::icarus_gen_services
}

#Start each new event with an empty event.
source:
{
  module_type: RootInput
 # timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   -1          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   crtdaq:{
      module_type: "DecoderICARUSCRT"

#cable delay due to T0 propagation in cables for each FEB, format [mac5, delay in ns], updated on Oct 14, 2021
      FEB_delay: [
        [31, 134],
        [32, 154],
        [33, 174],
        [34, 223],
        [35, 243],
        [36, 263],
        [25, 134],
        [26, 154],
        [27, 174],
        [28, 223],
        [29, 243],
        [30, 263],
        [43, 123],
        [44, 143],
        [45, 163],
        [46, 209],
        [47, 229],
        [48, 249],
        [37, 123],
        [38, 143],
        [39, 163],
        [40, 209],
        [41, 229],
        [42, 249],
        [55, 138],
        [56, 158],
        [57, 178],
        [58, 225],
        [59, 245],
        [60, 265],
        [49, 138],
        [50, 158],
        [51, 178],
        [52, 225],
        [53, 245],
        [54, 265],
        [ 3, 138],
        [ 1, 158],
        [ 6, 178],
        [ 7, 225],
        [ 8, 208],
        [ 9, 228],
        [ 5, 245],
        [ 4, 265],
        [92, 131],
        [93, 151],
        [94, 197],
        [95, 217],
        [96, 237],
        [97, 283],
        [85, 131],
        [86, 151],
        [87, 171],
        [88, 191],
        [89, 211],
        [90, 231],
        [91, 251],
        [17, 134],
        [19, 154],
        [21, 174],
        [22, 223],
        [23, 243],
        [24, 263],
        [10, 134],
        [11, 154],
        [13, 174],
        [14, 223],
        [15, 243],
        [16, 263],
        [67, 123],
        [68, 143],
        [69, 163],
        [70, 209],
        [71, 229],
        [72, 249],
        [61, 123],
        [62, 143],
        [63, 163],
        [64, 209],
        [65, 229],
        [66, 249],
        [84, 138],
        [83, 158],
        [82, 178],
        [81, 225],
        [80, 245],
        [79, 265],
        [78, 138],
        [77, 158],
        [76, 178],
        [75, 225],
        [74, 245],
        [73, 265]
      ]
   }     
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 daq: [  crtdaq ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [daq] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "test.root"
   dataTier:    "generated"
   compressionLevel: 1
 }
}

#services.IICARUSChannelMap.ChannelMappingTool: @local::ChannelMappingPostGres
