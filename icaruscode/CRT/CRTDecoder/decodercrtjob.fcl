#include "services_common_icarus.fcl"
#include "channelmapping_icarus.fcl"

process_name: crtdecoder

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "hist.root" }
  TimeTracker:  {}
  MemoryTracker:     { ignoreTotal: 1 } # default is one
#  RandomNumberGenerator: {} #ART native random number generator
  IICARUSChannelMap:        @local::icarus_channelmappinggservice	
                            @table::icarus_calibration_services
                            @table::icarus_wirecalibration_services

  #FileCatalogMetadata:  @local::art_file_catalog_mc
 #  @table::icarus_gen_services
}

#Start each new event with an empty event.
source:
{
  module_type: RootInput
 # timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   -1          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   crtdaq:{
      module_type: "DecoderICARUSCRT"

#cable delay due to T0 propagation in cables for each FEB, format [mac5, delay in ns], updated on Oct 14, 2021
      FEB_delay: [
        [31, 212],
        [32, 232],
        [33, 252],
        [34, 301],
        [35, 321],
        [36, 341],
        [25, 212],
        [26, 232],
        [27, 252],
        [28, 301],
        [29, 321],
        [30, 341],
        [43, 201],
        [44, 221],
        [45, 241],
        [46, 287],
        [47, 307],
        [48, 327],
        [37, 201],
        [38, 221],
        [39, 241],
        [40, 287],
        [41, 307],
        [42, 327],
        [55, 216],
        [56, 236],
        [57, 256],
        [58, 303],
        [59, 323],
        [60, 343],
        [49, 216],
        [50, 236],
        [51, 256],
        [52, 303],
        [53, 323],
        [54, 343],
        [ 3, 520],
        [ 1, 540],
        [ 6, 560],
        [ 7, 606],
        [ 8, 589],
        [ 9, 609],
        [ 5, 626],
        [ 4, 646],
        [92, 209],
        [93, 229],
        [94, 275],
        [95, 295],
        [96, 315],
        [97, 361],
        [85, 209],
        [86, 229],
        [87, 249],
        [88, 269],
        [89, 289],
        [90, 309],
        [91, 329],
        [17, 515],
        [19, 535],
        [21, 555],
        [22, 604],
        [23, 624],
        [24, 644],
        [10, 515],
        [11, 535],
        [13, 555],
        [14, 604],
        [15, 624],
        [16, 644],
        [67, 504],
        [68, 524],
        [69, 544],
        [70, 591],
        [71, 611],
        [72, 631],
        [61, 504],
        [62, 524],
        [63, 544],
        [64, 591],
        [65, 611],
        [66, 631],
        [84, 520],
        [83, 540],
        [82, 560],
        [81, 606],
        [80, 626],
        [79, 646],
        [78, 520],
        [77, 540],
        [76, 560],
        [75, 606],
        [74, 626],
        [73, 646]
      ]
   }     
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 daq: [  crtdaq ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [daq] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "test.root"
   dataTier:    "generated"
   compressionLevel: 1
 }
}

#services.IICARUSChannelMap.ChannelMappingTool: @local::ChannelMappingPostGres
