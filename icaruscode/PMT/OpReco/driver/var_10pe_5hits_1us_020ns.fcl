#include "services_common_icarus.fcl"
#include "icarus_ophitfinder.fcl"
#include "icarus_flashfinder.fcl"
#include "icarus_opana_modules.fcl"

process_name: OpReco

services:
{
  @table::icarus_basic_services
}

source:
{
  module_type: RootInput
}

physics:
{

 producers:
 {
   ophit:  @local::icarus_ophit_data
   ophitfull:    @local::icarus_ophitdebugger_data
   opflashCryoEast: @local::ICARUSSimpleFlashCryoEast
   opflashCryoWest: @local::ICARUSSimpleFlashCryoWest
   
 }
 analyzers: { 
   ophitana: @local::ICARUSOpHitTuple 
   opflashana: @local::ICARUSOpFlashAna
 }
 #produce: [ ophitfull]
 produce: [ ophit, opflashCryoEast, opflashCryoWest ]
 #produce: [ ophitfull, ophit, opflashCryoEast, opflashCryoWest ]
 #analyze: [ ophitana, opflashana ]
 analyze: [ opflashana ]
 store:   [ out1 ]
 trigger_paths: [ produce ]
 end_paths:     [ analyze ]
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "reconstructed.root"
   dataTier:    "reco"
   saveMemoryObjectThreshold: 0
   compressionLevel: 1
   fastCloning: false
 }
}


services.DetectorClocksService.InheritClockConfig: false

physics.producers.ophitfull.PedAlgoPset.Verbose: false
physics.producers.ophitfull.HitAlgoPset.Verbosity: false

physics.producers.opflashCryoEast.AlgoConfig.PEThreshold:    100
physics.producers.opflashCryoEast.AlgoConfig.PEThresholdHit: 1.0
physics.producers.opflashCryoEast.AlgoConfig.MinPECoinc:     10
physics.producers.opflashCryoEast.AlgoConfig.MinMultCoinc:   5
physics.producers.opflashCryoEast.AlgoConfig.IntegralTime:   1.
physics.producers.opflashCryoEast.AlgoConfig.PreSample:      0.02
physics.producers.opflashCryoEast.AlgoConfig.VetoSize:       1.
physics.producers.opflashCryoEast.AlgoConfig.TimeResolution: 0.02
#physics.producers.opflashCryoEast.AlgoConfig.DebugMode: true

physics.analyzers.ophitana.OutputFileName: "ophit_ana.root"
physics.analyzers.ophitana.MCTruthProducer: ""
#physics.analyzers.ophitana.OpDetWaveformProducer: "daqPMT"
physics.analyzers.ophitana.OpHitProducerList: ["ophit"]

physics.analyzers.opflashana.MCOpFlashProducer: ""
physics.analyzers.opflashana.MCTruthProducer: ""
physics.analyzers.opflashana.OpFlashProducerList: ["opflashCryoEast","opflashCryoWest"]


#physics.analyzers.opana.OpHitProducerList:["ophit","mcophit"]
#physics.analyzers.opana.OpFlashProducerList:["opflashTPC0","opflashTPC1","opflashTPC2","opflashTPC3","mcopflashTPC0","mcopflashTPC1","mcopflashTPC2","mcopflashTPC3","cheatopflashTPC0","cheatopflashTPC1","cheatopflashTPC2","cheatopflashTPC3"]

source.inputCommands: ["keep *_*_*_*", "drop opreco_*_*_*" ]

services.message.destinations :
{
  STDCOUT:
  {
     type:      "cout"      #tells the message service to output this destination to cout
     threshold: "INFO"      #tells the message service that this destination applies to WARNING and higher level messages
     categories:
     {
       default:
       {
         limit:       1000  #don't print anything at the infomsg level except the explicitly named categories
         reportEvery: 1
       }
     }
  }
}
